#lang typed/racket

(require "expr.rkt")
(require "token.rkt")
(require "token-type.rkt")
(require "scanner.rkt")

(module+ test
  (require typed/rackunit))

(: expression : [Listof token] Integer -> (Values Expr Integer))
(define (expression tokens curr)
  (equality tokens curr))

(: equality : [Listof token] Integer -> (Values Expr Integer))
(define (equality tokens curr)
  (bin-rule tokens curr '(BANG_EQUAL EQUAL_EQUAL) comparison))

(: comparison : [Listof token] Integer -> (Values Expr Integer))
(define (comparison tokens curr)
  (bin-rule tokens curr '(GREATER GREATER_EQUAL LESS LESS_EQUAL) term))

(: term : [Listof token] Integer -> (Values Expr Integer))
(define (term tokens curr)
  (bin-rule tokens curr '(MINUS PLUS) factor))

(: factor : [Listof token] Integer -> (Values Expr Integer))
(define (factor tokens curr)
  (bin-rule tokens curr '(SLASH STAR) unary))

(: unary : [Listof token] Integer -> (Values Expr Integer))
(define (unary tokens curr)
  (cond
    [(parse-match '(BANG MINUS) tokens curr)
     (define op (peek tokens curr))
     (let-values ([(expr curr) (unary tokens curr)])
       (values (expr-unary op expr) curr))]
    [else (primary tokens curr)]))

(: primary : [Listof token] Integer -> (Values Expr Integer))
(define (primary tokens curr)
  (match (token-type (peek tokens curr))
    ;; ['EOF (values (expr-literal null) (add1 curr))]
    ['FALSE (values (expr-literal false) (add1 curr))]
    ['TRUE (values (expr-literal true) (add1 curr))]
    ['NIL (values (expr-literal null) (add1 curr))]
    [(or 'NUMBER 'STRING)
     (values (expr-literal (peek tokens curr)) (add1 curr))]
    ['LEFT_PAREN
     (let-values ([(expr curr)
                   (expression tokens (add1 curr))])
       ;; TODO: find right paren or die
       (values (expr-grouping expr) (add1 curr)))]))

(module+ test
  (check-equal? (primary (scanner-scan "true") 0)
                (values (expr-literal true) 1)))

( : bin-rule : [Listof token] Integer [Listof TokenType]
    ([Listof token] Integer -> (Values Expr Integer))
    -> (Values Expr Integer))
(define (bin-rule tokens curr match-toks next-recurrence)
  (let-values ([(expr curr) (next-recurrence tokens curr)])
    (cond
      [(parse-match match-toks tokens curr)
       (define op (peek tokens curr))
       (let-values ([(right curr) (next-recurrence tokens (add1 curr))])
         (values (expr-binary expr op right) curr))]
      [else (error "")])))

(: parse-match : [Listof TokenType] [Listof token] Integer -> Boolean)
(define (parse-match types tokens curr)
  (andmap (Î» ([type : TokenType]) (check tokens curr type)) types))

(: check : [Listof token] Integer TokenType -> Boolean)
(define (check tokens curr type)
  (and (not (end? tokens curr))
       (eq? (token-type (peek tokens curr)) type)))

(: end? : [Listof token] Integer -> Boolean)
(define (end? tokens curr)
  (eq? 'EOF (token-type (peek tokens curr))))

(: previous : [Listof token] Integer -> token)
(define (previous tokens curr)
  (list-ref tokens (sub1 curr)))

(: peek : [Listof token] Integer -> token)
(define (peek tokens curr)
  (list-ref tokens curr))
